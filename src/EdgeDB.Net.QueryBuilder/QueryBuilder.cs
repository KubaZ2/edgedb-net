using EdgeDB.Interfaces;
using EdgeDB.Interfaces.Queries;
using EdgeDB.QueryNodes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace EdgeDB
{
    public class QueryBuilder<TType> :
        IDeleteQuery<TType>,
        IInsertQuery<TType>,
        ISelectQuery<TType>,
        IUpdateQuery<TType>,
        IUnlessConflictOn<TType>,
        IQueryBuilder
    {
        private readonly List<QueryNode> _nodes;
        private QueryNode? CurrentUserNode => _nodes.LastOrDefault(x => !x.IsAutoGenerated);
        private readonly Dictionary<string, object?> _queryGlobals;
        
        static QueryBuilder()
        {
            QueryObjectManager.Initialize();
        }

        internal QueryBuilder()
        {
            _nodes = new();
            _queryGlobals = new();
        }

        private TNode AddNode<TNode>(NodeContext context, bool autoGenerated = false)
            where TNode : QueryNode
        {
            // create the node and a builder
            var builder = new NodeBuilder(context, _queryGlobals, _nodes)
            {
                IsAutoGenerated = autoGenerated
            };
            
            var node = (TNode)Activator.CreateInstance(typeof(TNode), builder)!;

            // visit the node
            node.Visit();

            // if the node didn't generate a query assume its only modifying
            // globals so we can skip adding it to our node tree
            if (builder.Query.Length == 0)
                return node;

            // create a new group if its a root node
            _nodes.Add(node);

            return node;
        }

        public (string Query, IDictionary<string, object?> Parameters) Build()
        {
            List<string> query = new();
            List<IDictionary<string, object?>> parameters = new();

            var nodes = _nodes;

            foreach(var node in nodes)
                node.FinalizeQuery();
            
            // create a with block if we have any query globals
            if (_queryGlobals.Any())
            {
                var with = new WithNode(new NodeBuilder(new WithContext(typeof(TType))
                {
                    Values = _queryGlobals
                }, _queryGlobals, null));
                with.Visit();
                nodes = nodes.Prepend(with).ToList();
            }

            for (int i = nodes.Count - 1; i >= 0; i--)
            {
                var node = nodes[i];

                if (node is WithNode withNode)
                {
                    if (!withNode.HasVisited)
                        withNode.Visit();
                }

                var result = node.Build();

                if (!string.IsNullOrEmpty(result.Query))
                    query.Add(result.Query);

                parameters.Add(result.Parameters);
            }

            query.Reverse();

            return (string.Join(' ', query), parameters.SelectMany(x => x).DistinctBy(x => x.Key).ToDictionary(x => x.Key, x => x.Value));
        }

        public QueryBuilder<TType> With(string name, object? value)
        {
            _queryGlobals[name] = value;
            return this;
        }

        #region Root nodes
        public ISelectQuery<TType> Select
            => SelectWithShape(null!);
        public ISelectQuery<TType> SelectWithShape(Expression<Func<object>> shape)
        {
            AddNode<SelectNode>(new SelectContext(typeof(TType))
            {
                Shape = shape
            });
            return this;
        }

        public IInsertQuery<TType> Insert(TType value)
        {
            AddNode<InsertNode>(new InsertContext(typeof(TType))
            {
                Value = value
            });
            return this;
        }

        public IUpdateQuery<TType> Update(Expression<Func<TType, TType>> updateFunc, bool returnUpdatedValue = true)
        {
            var selectedGlobal = returnUpdatedValue ? QueryUtils.GenerateRandomVariableName() : null;
            AddNode<UpdateNode>(new UpdateContext(typeof(TType))
            {
                UpdateExpression = updateFunc,
                SetAsGlobal = returnUpdatedValue,
                GlobalName = selectedGlobal
            });

            if (returnUpdatedValue)
            {
                AddNode<SelectNode>(new SelectContext(typeof(TType))
                {
                    SelectName = selectedGlobal,
                }, true);
            }
            
            return this;
        }
        
        public IDeleteQuery<TType> Delete
        {
            get
            {
                AddNode<DeleteNode>(new DeleteContext(typeof(TType)));
                return this;
            }
        }
        
        #endregion

        #region Generic sub-query methods
        private QueryBuilder<TType> Filter(Expression<Func<TType, bool>> filter)
        {
            switch (CurrentUserNode)
            {
                case SelectNode selectNode:
                    selectNode.Filter(filter);
                    break;
                case UpdateNode updateNode:
                    updateNode.Filter(filter);
                    break;
                default:
                    throw new InvalidOperationException($"Cannot filter on a {CurrentUserNode}");
            }
            return this;
        }

        private QueryBuilder<TType> OrderBy(bool asc, Expression<Func<TType, object?>> selector, OrderByNullPlacement? placement)
        {
            if (CurrentUserNode is not SelectNode selectNode)
                throw new InvalidOperationException($"Cannot order by on a {CurrentUserNode}");

            selectNode.OrderBy(asc, selector, placement);

            return this;
        }

        private QueryBuilder<TType> Offset(long offset)
        {
            if (CurrentUserNode is not SelectNode selectNode)
                throw new InvalidOperationException($"Cannot offset on a {CurrentUserNode}");

            selectNode.Offset(offset);

            return this;
        }

        private QueryBuilder<TType> Limit(long limit)
        {
            if (CurrentUserNode is not SelectNode selectNode)
                throw new InvalidOperationException($"Cannot limit on a {CurrentUserNode}");

            selectNode.Limit(limit);

            return this;
        }

        private QueryBuilder<TType> UnlessConflictOn(Expression<Func<TType, object?>> selector)
        {
            if (CurrentUserNode is not InsertNode insertNode)
                throw new InvalidOperationException($"Cannot unless conflict on a {CurrentUserNode}");

            insertNode.UnlessConflictOn(selector);

            return this;
        }
        #endregion

        #region ISelectQuery
        ISelectQuery<TType> ISelectQuery<TType>.Filter(Expression<Func<TType, bool>> filter)
            => Filter(filter);
        ISelectQuery<TType> ISelectQuery<TType>.OrderBy(Expression<Func<TType, object?>> propertySelector, OrderByNullPlacement? nullPlacement)
            => OrderBy(true, propertySelector, nullPlacement);
        ISelectQuery<TType> ISelectQuery<TType>.OrderByDesending(Expression<Func<TType, object?>> propertySelector, OrderByNullPlacement? nullPlacement)
            => OrderBy(false, propertySelector, nullPlacement);
        ISelectQuery<TType> ISelectQuery<TType>.Offset(long offset)
            => Offset(offset);
        ISelectQuery<TType> ISelectQuery<TType>.Limit(long limit)
            => Limit(limit);
        #endregion

        #region IInsertQuery
        IInsertQuery<TType> IInsertQuery<TType>.UnlessConflictOn(Expression<Func<TType, object?>> propertySelector)
            => UnlessConflictOn(propertySelector);
        #endregion

        #region IUpdateQuery
        IMultiCardinalityExecutable<TType> IUpdateQuery<TType>.Filter(Expression<Func<TType, bool>> filter)
            => Filter(filter);
        #endregion

        #region IUnlessConflictOn
        ISingleCardinalityExecutable<TType> IUnlessConflictOn<TType>.ElseReturn()
        {
            throw new NotImplementedException();
        }
        #endregion

        #region IDeleteQuery
        IDeleteQuery<TType> IDeleteQuery<TType>.Filter(Expression<Func<TType, bool>> filter)
            => Filter(filter);
        IDeleteQuery<TType> IDeleteQuery<TType>.OrderBy(Expression<Func<TType, object?>> propertySelector, OrderByNullPlacement? nullPlacement)
            => OrderBy(true, propertySelector, nullPlacement);

        IDeleteQuery<TType> IDeleteQuery<TType>.OrderByDesending(Expression<Func<TType, object?>> propertySelector, OrderByNullPlacement? nullPlacement)
            => OrderBy(false, propertySelector, nullPlacement);

        IDeleteQuery<TType> IDeleteQuery<TType>.Offset(long offset)
            => Offset(offset);

        IDeleteQuery<TType> IDeleteQuery<TType>.Limit(long limit)
            => Limit(limit);
        #endregion

        Task<IReadOnlyCollection<TType>> IMultiCardinalityExecutable<TType>.ExecuteAsync(IEdgeDBQueryable edgedb)
        {
            throw new NotImplementedException();
        }

        Task<TType> ISingleCardinalityExecutable<TType>.ExecuteAsync(IEdgeDBQueryable edgedb)
        {
            throw new NotImplementedException();
        }
    }

    internal interface IQueryBuilder
    {
        (string Query, IDictionary<string, object?> Parameters) Build();
    }
}
