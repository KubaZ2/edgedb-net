using EdgeDB.Interfaces;
using EdgeDB.Interfaces.Queries;
using EdgeDB.QueryNodes;
using System.Linq.Expressions;

namespace EdgeDB
{
    /// <summary>
    ///     Represents a generic query builder for querying against <typeparamref name="TType"/>.
    /// </summary>
    /// <typeparam name="TType">The type of which queries will be preformed with.</typeparam>
    public interface IQueryBuilder<TType> :
        IQueryBuilder,
        ISelectQuery<TType>,
        IUpdateQuery<TType>,
        IDeleteQuery<TType>,
        IInsertQuery<TType>,
        IUnlessConflictOn<TType>,
        IGroupQuery<TType>,
        IGroupable<TType>
    {
        /// <summary>
        ///     Adds a value to a <c>WITH</c> statement.
        /// </summary>
        /// <remarks>
        ///     This value can be used later within queries by using a lambda with the <see cref="QueryContext"/> object,
        ///     then calling <see cref="QueryContext.Global{TType}(string)"/>.
        /// </remarks>
        /// <param name="name">The name of the value.</param>
        /// <param name="value">The value to add.</param>
        /// <returns>
        ///     The current query builder.
        /// </returns>
        IQueryBuilder<TType> With(string name, object? value);

        /// <summary>
        ///     Adds a <c>SELECT</c> statement selecting the current <typeparamref name="TType"/> with a autogenerated shape.
        /// </summary>
        /// <returns>
        ///     A <see cref="ISelectQuery{TType}"/>.
        /// </returns>
        ISelectQuery<TType> Select();

        /// <summary>
        ///     Adds a <c>SELECT</c> statement selecting the provided expression.
        /// </summary>
        /// <typeparam name="TResult">The return result of the select expression.</typeparam>
        /// <param name="selectFunc">The selecting expression.</param>
        /// <returns>
        ///     A <see cref="ISelectQuery{TType}"/>.
        /// </returns>
        ISelectQuery<TResult> Select<TResult>(Expression<Func<TResult>> selectFunc);

        /// <summary>
        ///     Adds a <c>SELECT</c> statement selecting the current <typeparamref name="TType"/> with the given shape.
        /// </summary>
        /// <remarks>
        ///     To define a shape, use <see cref="QueryContext.Include{TType}"/> to include a property. any other 
        ///     methods/values will be treated as computed values.
        /// </remarks>
        /// <param name="shape">The shape to select.</param>
        /// <returns>
        ///     A <see cref="ISelectQuery{TType}"/>.
        /// </returns>
        ISelectQuery<TType> Select(Expression<Func<QueryContext, TType?>> shape);

        /// <summary>
        ///     Adds a <c>SELECT</c> statement selecting the type <typeparamref name="TNewType"/> with the given shape.
        /// </summary>
        /// <remarks>
        ///     To define a shape, use <see cref="QueryContext.Include{TType}"/> to include a property. any other 
        ///     methods/values will be treated as computed values.
        /// </remarks>
        /// <typeparam name="TNewType">The type to select.</typeparam>
        /// <param name="shape">The shape to select.</param>
        /// <returns>
        ///     A <see cref="ISelectQuery{TNewType}"/>.
        /// </returns>
        ISelectQuery<TNewType> Select<TNewType>(Expression<Func<QueryContext, TNewType?>> shape);

        /// <summary>
        ///     Adds a <c>INSERT</c> statement inserting an instance of <typeparamref name="TType"/>.
        /// </summary>
        /// <param name="value">The value to insert.</param>
        /// <param name="returnInsertedValue">
        ///     whether or not to implicitly add a select statement to return the inserted value.
        /// </param>
        /// <returns>A <see cref="IInsertQuery{TType}"/>.</returns>
        IInsertQuery<TType> Insert(TType value, bool returnInsertedValue = true);

        /// <summary>
        ///     Adds a <c>INSERT</c> statement inserting an instance of <typeparamref name="TType"/>.
        /// </summary>
        /// <param name="value">The callback containing the value initialization to insert.</param>
        /// <param name="returnInsertedValue">
        ///     whether or not to implicitly add a select statement to return the inserted value.
        /// </param>
        /// <returns>A <see cref="IInsertQuery{TType}"/>.</returns>
        IInsertQuery<TType> Insert(Expression<Func<QueryContext, TType>> value, bool returnInsertedValue = true);

        /// <summary>
        ///     Adds a <c>UPDATE</c> statement updating an instance of <typeparamref name="TType"/>.
        /// </summary>
        /// <param name="updateFunc">
        ///     The callback used to update <typeparamref name="TType"/>. The first parameter is the old value.
        /// </param>
        /// <param name="returnUpdatedValue">
        ///     whether or not to implicitly add a select statement to return the inserted value.
        /// </param>
        /// <returns>A <see cref="IInsertQuery{TType}"/>.</returns>
        IUpdateQuery<TType> Update(Expression<Func<TType, TType>> updateFunc, bool returnUpdatedValue = true);

        /// <summary>
        ///     Adds a <c>DELETE</c> statement deleting an instance of <typeparamref name="TType"/>.
        /// </summary>
        IDeleteQuery<TType> Delete { get; }
    }

    /// <summary>
    ///     Represents a generic query builder with a build function.
    /// </summary>
    public interface IQueryBuilder
    {
        /// <summary>
        ///     Gets a read-only collection of query nodes within this query builder.
        /// </summary>
        internal IReadOnlyCollection<QueryNode> Nodes { get; }

        /// <summary>
        ///     Gets a read-only collection of globals defined within this query builder.
        /// </summary>
        internal IReadOnlyCollection<QueryGlobal> Globals { get; }

        /// <summary>
        ///     Gets a read-only dictionary of query variables defined within the query builder.
        /// </summary>
        internal IReadOnlyDictionary<string, object?> Variables { get; }

        /// <summary>
        ///     Builds the current query.
        /// </summary>
        /// <remarks>
        ///     If the query requires introspection please use 
        ///     <see cref="BuildAsync(IEdgeDBQueryable, CancellationToken)"/>.
        /// </remarks>
        /// <returns>
        ///     A <see cref="BuiltQuery"/>.
        /// </returns>
        BuiltQuery Build();

        /// <summary>
        ///     Builds the current query asynchronously, allowing database introspection.
        /// </summary>
        /// <param name="edgedb">The client to preform introspection with.</param>
        /// <param name="token">A cancellation token to cancel the asynchronous operation.</param>
        /// <returns>A <see cref="BuiltQuery"/>.</returns>
        ValueTask<BuiltQuery> BuildAsync(IEdgeDBQueryable edgedb, CancellationToken token = default);

        /// <summary>
        ///     Builds the current query builder into its <see cref="BuiltQuery"/> 
        ///     form and exlcudes globals from the query text and puts them in 
        ///     <see cref="BuiltQuery.Globals"/>.
        /// </summary>
        /// <param name="preFinalizerModifier">
        ///     A modifier delegate to change nodes behaviour before the finalizer is called.
        /// </param>
        /// <returns>
        ///     A <see cref="BuiltQuery"/> which is the current query this builder has constructed.
        /// </returns>
        internal BuiltQuery BuildWithGlobals(Action<QueryNode>? preFinalizerModifier = null);
    }
}
