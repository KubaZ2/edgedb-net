using CommandLine;
using EdgeDB.CLI.Arguments;
using EdgeDB.CLI.Utils;
using EdgeDB.Codecs;
using System.Reflection;

namespace EdgeDB.CLI;

[Verb("generate", HelpText = "Generate or updates csharp classes from .edgeql files.")]
public class Generate : ConnectionArguments, ICommand
{
    [Option('p', "build-project", HelpText = "Whether or not to create the default class library that will contain the generated source code.")]
    public bool GenerateProject { get; set; } = true;

    [Option('o', "output", HelpText = "The output directory for the generated source to be placed.")]
    public string? OutputDirectory { get; set; }

    [Option('n', "generated-project-name", HelpText = "The name of the generated project.")]
    public string GeneratedProjectName { get; set; } = "EdgeDB.Generated";

    [Option("target", HelpText = "The language the generated code should target\n\nValid inputs are: C#, F#, and VB")]
    public string? TargetLanguage { get; set; } 

    public async Task ExecuteAsync()
    {
        TargetLanguage = (TargetLanguage ?? "c#").ToLower();

        // get connection info
        var connection = GetConnection();

        // create the client
        var client = new EdgeDBTcpClient(connection, new());

        Console.WriteLine($"Connecting to {connection.Hostname}:{connection.Port}...");
        await client.ConnectAsync();

        var projectRoot = ProjectUtils.GetProjectRoot();
        
        OutputDirectory ??= Path.Combine(projectRoot, "EdgeDB.Generated");

        if(GenerateProject && !Directory.Exists(OutputDirectory))
        {
            Console.WriteLine("Creating EdgeDB.Generated project...");
            await ProjectUtils.CreateGeneratedProjectAsync(projectRoot, GeneratedProjectName, TargetLanguage);
        }

        // find edgeql files
        var edgeqlFiles = ProjectUtils.GetTargetEdgeQLFiles(projectRoot);
        
        Console.WriteLine($"Generating {edgeqlFiles.Count()} files...");

        var queriesExtensionWriter = CreateDefaultReader();

        var languageWriter = ILanguageWriter.GetWriter(TargetLanguage);

        foreach (var file in edgeqlFiles)
        {
            var edgeql = File.ReadAllText(file);
            var parseResult = await client.ParseAsync(edgeql, Cardinality.Many, IOFormat.Binary, Capabilities.All, default);

            ProcessEdgeQLFile(parseResult, languageWriter, queriesExtensionWriter);
        }
    }

    private void ProcessEdgeQLFile(EdgeDBBinaryClient.ParseResult parseResult, ILanguageWriter writer, 
        CodeWriter extWriter)
    {
        // generate the type
        var codecType = GetTypeOfCodec(parseResult.OutCodec.Codec);
    }

    private CodecTypeInfo GetTypeOfCodec(ICodec codec, string? name = null)
    {
        CodecTypeInfo typeInfo;

        // TODO: complete codec parsing

        typeInfo = codec switch
        {
            Codecs.Object obj => new CodecTypeInfo
            {
                IsObject = true,
                Children = obj.InnerCodecs.Select((x, i) => GetTypeOfCodec(x, obj.PropertyNames[i])),
                TypeName = name
            },
            ICodec set when ReflectionUtils.IsSubclassOfRawGeneric(set.GetType(), typeof(Set<>)) => new CodecTypeInfo
            {
                
                Children = new[] { GetTypeOfCodec((ICodec)set.GetType().GetField("_innerCodec", BindingFlags.Instance | BindingFlags.NonPublic)!.GetValue(set)!) }
            }
        };

        typeInfo.Name = name ?? typeInfo.Name;
    }

    private class CodecTypeInfo
    {
        public bool IsArray { get; set; }
        public bool IsObject { get; set; }
        public bool IsTuple { get; set; }
        public string? Name { get; set; }
        public string? TypeName { get; set; }
        public IEnumerable<CodecTypeInfo>? Children { get; set; }
    }

    private CodeWriter CreateDefaultReader()
    {
        var writer = new CodeWriter();
        writer.AppendLine("// AUTOGENERATED: DO NOT MODIFY");
        writer.AppendLine($"// Generated on {DateTime.UtcNow:O}");
        writer.AppendLine($"using EdgeDB;");
        writer.AppendLine($"using {GeneratedProjectName};");
        writer.AppendLine();
        
        return writer;
    }
}
